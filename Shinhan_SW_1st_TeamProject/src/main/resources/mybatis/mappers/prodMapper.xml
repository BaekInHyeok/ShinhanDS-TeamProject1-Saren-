<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.saren.prod">
	
	<!-- 0701 수정중 -->
	<!-- 상품 상세 정보 조회 -->
	<!-- 상품 이름,상품 가격,브랜드명,카테고리명(부모카테고리명,세부카테고리명),상품의 리뷰 수,문의 수 조회 
	<select id="selectProdDetailInfoByProdId" parameterType="string"
		resultType="map">
		
		SELECT 
		    P.prod_name, 
		    P.prod_price,
		    M.brand,
		    C.category_name AS sub_category_name,
		    PC.category_name AS parent_category_name,
		    (SELECT COUNT(R.review_id) 
		     FROM REVIEWS R 
		     JOIN SELLER_PROD_STOCK SPS ON R.review_id = SPS.review_id 
		     WHERE SPS.prod_id = P.prod_id) AS review_count,
		    (SELECT AVG(R.rate) 
		     FROM REVIEWS R 
		     JOIN SELLER_PROD_STOCK SPS ON R.review_id = SPS.review_id 
		     WHERE SPS.prod_id = P.prod_id) AS average_rate,
		    (SELECT COUNT(BI.buyer_inq_id) 
		     FROM BUYER_INQ BI 
		     WHERE BI.prod_id = P.prod_id) AS inquiry_count
		FROM PROD P
		JOIN MEMBER M ON P.member_id = M.member_id
		JOIN CATEGORY C ON P.CATEGORY_ID = C.category_id
		LEFT JOIN CATEGORY PC ON C.parent_category_id = PC.category_id
		WHERE P.prod_id = #{prod_id}
	</select>
	-->
	<!-- 0701 수정중 -->
	<select id="selectProdDetailInfoByProdId" parameterType="string"
		resultType="map">
		SELECT  P.* , M.*, C.*
		FROM PROD P
		JOIN MEMBER M ON P.MEMBER_ID = M.MEMBER_ID 
		JOIN CATEGORY C ON P.CATEGORY_ID = C.CATEGORY_ID
		WHERE PROD_ID  =  #{prod_id}
		
	</select>
	<select id="selectByProdId" parameterType="string"
		resultType="prodVO">
		SELECT * 
		FROM PROD 
		WHERE prod_id = #{prod_id}
	</select>
	
	<select id="selectByMemberId" parameterType="string"
		resultType="prodVO">
		SELECT * 
		FROM PROD 
		WHERE member_id = #{member_id}
	</select>

	<select id="selectAll" resultType="prodVO">
		SELECT *
		FROM PROD
	</select>

	<insert id="prodInsert" parameterType="prodVO">
		INSERT 
		INTO PROD(prod_id, prod_name, prod_desc, prod_price, 
				  prod_added_date, category_id, member_id) 
		VALUES(#{prod_id}, #{prod_name}, #{prod_desc}, #{prod_price}, 
			   #{prod_added_date}, #{category_id}, #{member_id})
	</insert>

	<update id="prodUpdate" parameterType="prodVO">
		UPDATE PROD
		SET
		prod_name = #{prod_name}, prod_desc = #{prod_desc}, 
		"prod_price" = #{prod_price}, "prod_added_date" = #{prod_added_date}, 
		"category_id" = #{category_id}, "member_id" = #{member_id}
		WHERE "prod_id" = #{prod_id}
	</update>
	
	<update id="prodModify" parameterType="prodVO">
		UPDATE PROD
		SET
		prod_desc = #{prod_desc}, 
		prod_price = #{prod_price},  
		category_id = #{category_id}
		WHERE prod_id = #{prod_id}
	</update>

	<delete id="prodDelete" parameterType="int">
		DELETE
		FROM PROD
		WHERE "prod_id" = #{prod_id}
	</delete>
	
	<select id="selectAllProdByCurCtg" parameterType="map" resultType="map">
		<![CDATA[
		SELECT 
			MEMBER.BRAND,
			PRD_30.PROD_NAME,
			PRD_30.PROD_PRICE,
			PRD_30.PROD_ID
		FROM
			(SELECT *
			FROM
				(SELECT ROWNUM RN, PRD.*
				FROM
					(SELECT *
					FROM PROD
					JOIN
						(SELECT CATEGORY_ID
						FROM CATEGORY 
						WHERE #{category_id}<CATEGORY_ID 
						AND CATEGORY_ID< #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																	FROM CATEGORY
																	WHERE CATEGORY_ID = #{category_id}))
						AND is_lowest=1) CTG
					USING(CATEGORY_ID)) PRD)
			WHERE #{start}<RN
			AND RN<#{end}) PRD_30
		JOIN MEMBER USING(MEMBER_ID)
		]]>	
	</select>
	
	<select id="selectAllProdNumsByCurCtg" parameterType="int" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM
			(SELECT ROWNUM RN, PRD.*
			FROM
				(SELECT *
				FROM PROD
				JOIN
					(SELECT CATEGORY_ID
					FROM CATEGORY 
					WHERE #{category_id}<CATEGORY_ID 
					AND CATEGORY_ID < #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																	   FROM CATEGORY
																	   WHERE CATEGORY_ID = #{category_id}))
					AND is_lowest=1) CTG
				USING(CATEGORY_ID)) PRD)
		]]>	
		</select>
	
	<select id="selectProdByLwstCtgId" parameterType="int" resultType="map">
		<![CDATA[
		SELECT 
			MEMBER.BRAND,
			PRD_30.PROD_NAME,
			PRD_30.PROD_PRICE,
			PRD_30.PROD_ID
		FROM
			(
				SELECT *
				FROM
					(
						SELECT ROWNUM RN, PRD.*
						FROM
							(
								SELECT *
								FROM PROD
								WHERE CATEGORY_ID=#{category_id}
							) PRD
					) 
				WHERE #{start}<RN
				AND RN<#{end}
			) PRD_30
		JOIN MEMBER USING(MEMBER_ID)
		]]>	
	</select>
	
	<select id="selectProdNumsByLwstCtgId" parameterType="int" resultType="int">
		<![CDATA[
		SELECT COUNT(*)
		FROM
			(
				SELECT *
				FROM
					(
						SELECT ROWNUM RN, PRD.*
						FROM
							(
								SELECT *
								FROM PROD
								WHERE CATEGORY_ID=#{category_id}
							) PRD
					) 
			) PRD_30
		]]>
	</select>
	
	<select id="selectBrndsByCtgId" parameterType="map" resultType="string">
		
		<choose>
			<when test="is_lowest == 0">
			<![CDATA[ 
			SELECT BRAND
			FROM
				(SELECT ROWNUM RN, BRAND
				FROM
					(SELECT DISTINCT MEMBER.BRAND
					FROM PROD
					JOIN
						(SELECT CATEGORY_ID
						FROM CATEGORY 
						WHERE #{category_id}<CATEGORY_ID 
						AND CATEGORY_ID< #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																	FROM CATEGORY
																	WHERE CATEGORY_ID = #{category_id}))
						AND is_lowest=1) CTG
					USING(CATEGORY_ID) 
					JOIN MEMBER 
					USING(MEMBER_ID)) PRD)
			WHERE #{start}<RN AND RN<#{end}
			]]>
			</when>
			
			<otherwise>
			<![CDATA[ 
			SELECT BRAND
			FROM
				(
					SELECT ROWNUM RN, BRAND
					FROM
						(	
							SELECT DISTINCT MEMBER.BRAND
							FROM
								(
									SELECT *
									FROM PROD
									WHERE CATEGORY_ID=#{category_id}
								) PRD
							JOIN MEMBER
							USING(MEMBER_ID)
						)
				) PRD_30
			WHERE #{start}<RN AND RN<#{end}
			]]>
			</otherwise>
		</choose>

	</select>
	
	<select id="selectBrndsNumsByCtgId" parameterType="map" resultType="int">
		
		<choose>
			<when test="is_lowest == 0">
			<![CDATA[ 
			SELECT COUNT(*)
			FROM
				(SELECT DISTINCT MEMBER.BRAND
				FROM PROD
				JOIN
					(SELECT CATEGORY_ID
					FROM CATEGORY 
					WHERE #{category_id}<CATEGORY_ID 
					AND CATEGORY_ID< #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																FROM CATEGORY
																WHERE CATEGORY_ID = #{category_id}))
					AND is_lowest=1) CTG
				USING(CATEGORY_ID) 
				JOIN MEMBER 
				USING(MEMBER_ID))
			]]>
			</when>
			
			<otherwise>
			<![CDATA[ 
			SELECT COUNT(*)
			FROM
				(
					SELECT DISTINCT MEMBER.BRAND
					FROM
						(
							SELECT *
							FROM PROD
							WHERE CATEGORY_ID=#{category_id}
						) PRD
					JOIN MEMBER
					USING(MEMBER_ID)
				)
			]]>
			</otherwise>
		</choose>
		
	</select>
	
	<select id="searchByBrndAndPrc" parameterType="map" resultType="map">
		<choose>
			<when test="is_lowest == 0">
			SELECT 
				BRAND,
				PROD_NAME,
				PROD_PRICE,
				PROD_ID
			FROM
				(SELECT
					ROWNUM RN,
					BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM
					(SELECT
						BRAND,
						PROD_NAME,
						PROD_PRICE,
						PROD_ID
					FROM PROD
					JOIN
						(SELECT MEMBER_ID, BRAND
						FROM MEMBER
						WHERE BRAND IN 
						<foreach collection="slctdBrnd" item="brnd" open="(" close=")" separator=",">
							#{brnd}
						</foreach>)
					USING(MEMBER_ID)
					INTERSECT
					SELECT 
						MEMBER.BRAND,
						PROD_NAME,
						PROD_PRICE,
						PROD_ID
					FROM
						(SELECT *
						FROM PROD
						JOIN
			<![CDATA[ 
							(SELECT CATEGORY_ID
							FROM CATEGORY 
							WHERE #{category_id}<CATEGORY_ID 
							AND CATEGORY_ID< #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																		FROM CATEGORY
																		WHERE CATEGORY_ID = #{category_id}))
							AND is_lowest=1) CTG
						USING(CATEGORY_ID))
					JOIN MEMBER USING(MEMBER_ID)))
			WHERE #{start}<RN AND RN<#{end}
			]]>
			
			</when>
			
			<otherwise>
			SELECT 
				BRAND,
				PROD_NAME,
				PROD_PRICE,
				PROD_ID
			FROM
				(SELECT
					ROWNUM RN,
					BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM
					(SELECT
						BRAND,
						PROD_NAME,
						PROD_PRICE,
						PROD_ID
					FROM PROD
					JOIN
						(SELECT MEMBER_ID, BRAND
						FROM MEMBER
						WHERE BRAND IN 
						<foreach collection="slctdBrnd" item="brnd" open="(" close=")" separator=",">
							#{brnd}
						</foreach>)
					USING(MEMBER_ID)
					INTERSECT
					SELECT 
						MEMBER.BRAND,
						PROD_NAME,
						PROD_PRICE,
						PROD_ID
					FROM
						(SELECT *
						FROM PROD
						WHERE CATEGORY_ID = #{category_id})
					JOIN MEMBER USING(MEMBER_ID)))
			<![CDATA[ 
			WHERE #{start}<RN AND RN<#{end}
			]]>
			</otherwise>
		</choose>
	</select>
	
	<select id="searchNumsByBrndAndPrc" parameterType="map" resultType="int">
		<choose>
			<when test="is_lowest == 0">
			SELECT COUNT(*)
			FROM
				(SELECT
					BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM PROD
				JOIN
					(SELECT MEMBER_ID, BRAND
					FROM MEMBER
					WHERE BRAND IN 
					<foreach collection="slctdBrnd" item="brnd" open="(" close=")" separator=",">
						#{brnd}
					</foreach>)
				USING(MEMBER_ID)
				INTERSECT
				SELECT 
					MEMBER.BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM
					(SELECT *
					FROM PROD
					JOIN
			<![CDATA[ 
						(SELECT CATEGORY_ID
						FROM CATEGORY 
						WHERE #{category_id}<CATEGORY_ID 
						AND CATEGORY_ID< #{category_id} + POWER(10, 8-2*( SELECT CATEGORY_DEPTH
																	FROM CATEGORY
																	WHERE CATEGORY_ID = #{category_id}))
						AND is_lowest=1) CTG
					USING(CATEGORY_ID))
				JOIN MEMBER USING(MEMBER_ID))
			]]>
			
			</when>
			
			<otherwise>
			SELECT COUNT(*)
			FROM
				(SELECT
					BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM PROD
				JOIN
					(SELECT MEMBER_ID, BRAND
					FROM MEMBER
					WHERE BRAND IN 
					<foreach collection="slctdBrnd" item="brnd" open="(" close=")" separator=",">
						#{brnd}
					</foreach>)
				USING(MEMBER_ID)
				INTERSECT
				SELECT 
					MEMBER.BRAND,
					PROD_NAME,
					PROD_PRICE,
					PROD_ID
				FROM
					(SELECT *
					FROM PROD
					WHERE CATEGORY_ID = #{category_id})
				JOIN MEMBER USING(MEMBER_ID))
			</otherwise>
		</choose>
	</select>
	
</mapper>
