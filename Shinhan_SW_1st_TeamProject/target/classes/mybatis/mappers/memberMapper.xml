<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.saren.member">

	<!-- 로그인 회원 정보 수정용 비밀번호 체크  -->
	<select id="memberCheckByPw" parameterType="memberVO"
		resultType="memberVO">
		SELECT *
		FROM MEMBER
		WHERE member_pw = #{member_pw}
		and member_id = #{member_id}
	</select>
	<!-- 회원 정보 검색 -->
	<select id="selectById" parameterType="string"
		resultType="memberVO">
		SELECT *
		FROM MEMBER
		WHERE member_id = #{member_id}
	</select>
	
	<select id="findId" parameterType="string"
		resultType="memberVO">
		SELECT *
		FROM MEMBER
		WHERE phone = #{phone}
	</select>

	<select id="selectAll" resultType="memberVO">
		SELECT *
		FROM MEMBER
	</select>

	<select id="loginChk" resultType="membervo" parameterType="String"> 
		select member_id, member_pw 
		from MEMBER
		where member_id = #{member_id}
	</select>

	<insert id="memberInsert" parameterType="memberVO">
		INSERT
		INTO MEMBER(member_id, member_pw, member_name, email, phone,
					brand, birth_date, last_access, member_type, gender, seller_authority, create_date)
		VALUES(#{member_id}, #{member_pw}, #{member_name}, #{email}, #{phone},
		        <choose>
		            <when test="brand == null">
		                null
		            </when>
		            <otherwise>
		                #{brand}
		            </otherwise>
		        </choose>,
				#{birth_date}, #{last_access}, #{member_type}, #{gender}, 
				<choose>
					<when test="member_type == 1">
						'U'
					</when>
					<otherwise>
						'N'
					</otherwise>
				</choose>,
				#{create_date})
	</insert>

	<!-- 구매자 회원 정보 수정 -->
	<update id="myInfoUpdate" parameterType="memberVO">
		UPDATE MEMBER
		SET 
		member_id = #{member_id}, 
		member_pw = #{member_pw},
		email = #{email},
		phone = #{phone}
		WHERE member_id = #{member_id}
	</update>


	<update id="memberUpdate" parameterType="memberVO">
		UPDATE MEMBER
		SET
		member_pw = #{member_pw},
		member_name = #{member_name}, 
		email = #{email},
		phone = #{phone}, 
		brand = #{brand}, 
		birth_date = #{birth_date},
		last_access = #{last_access}, 
		member_type = #{member_type}, 
		gender = #{gender}
		WHERE member_id = #{member_id}
	</update>

	<update id="memberUpdateAccess" parameterType="memberVO">
		UPDATE MEMBER
		SET
		last_access = #{last_access}
		WHERE member_id = #{member_id}
	</update>

	<delete id="memberDelete" parameterType="string">
		DELETE
		FROM MEMBER
		WHERE
		member_id = #{member_id}
	</delete>

	<select id="selectBySeller" resultType="memberVO">
		select * from member
		where member_type = 2
	</select>

	<select id="selectByCustomer" resultType="memberVO">
		select * from member
		where member_type = 1
	</select>

	<select id="selectBySeller_authority" resultType="memberVO">
		select * from
		member where seller_authority = 'Y'
		and member_type = 2
	</select>

	<select id="selectBySeller_info" resultType="memberVO">
		select * from member
		where member_id = #{member_id}
	</select>

	<select id="searchMembers" parameterType="map"
		resultType="memberVO">
		SELECT * FROM MEMBER
		WHERE ${searchType} LIKE '%' || #{keyword} || '%'
	</select>


	<select id="sellerMonthlyIncreaseRate" resultType="double">
    <![CDATA[
    WITH this_month AS (
        SELECT COUNT(*) AS count_this_month
        FROM member
        WHERE create_date >= TRUNC(SYSDATE, 'MM')
    ),
    last_month AS (
        SELECT COUNT(*) AS count_last_month
        FROM member
        WHERE create_date >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1)
          AND create_date < TRUNC(SYSDATE, 'MM')
    )
    SELECT
        CASE 
            WHEN last_month.count_last_month = 0 THEN 
                CASE 
                    WHEN this_month.count_this_month = 0 THEN 0
                    ELSE 100
                END
            ELSE ROUND(
                (this_month.count_this_month - last_month.count_last_month) / 
                last_month.count_last_month * 100, 2
            )
        END AS increase_percentage
    FROM
        this_month,
        last_month
    ]]>
	</select>

	<select id="customerMonthlyIncreaseRate" resultType="double">
    <![CDATA[
    WITH this_month AS (
        SELECT COUNT(*) AS count_this_month
        FROM member
        WHERE create_date >= TRUNC(SYSDATE, 'MM')
    ),
    last_month AS (
        SELECT COUNT(*) AS count_last_month
        FROM member
        WHERE create_date >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -1)
          AND create_date < TRUNC(SYSDATE, 'MM')
    )
    SELECT
        CASE 
            WHEN last_month.count_last_month = 0 THEN NULL
            ELSE ROUND(
                (this_month.count_this_month - last_month.count_last_month) / 
                last_month.count_last_month * 100, 2
            )
        END AS increase_percentage
    FROM
        this_month,
        last_month
    ]]>
	</select>

	<select id="seller_Monthly_IncreaseRate" resultType="int">
		SELECT
		COUNT(*)
		FROM MEMBER
		WHERE member_type = 2
		AND
		TO_CHAR(create_date, 'YYYY-MM') = TO_CHAR(SYSDATE,
		'YYYY-MM')
	</select>
	<select id="customer_Monthly_IncreaseRate" resultType="int">
		SELECT
		COUNT(*)
		FROM MEMBER
		WHERE member_type = 1
		AND
		TO_CHAR(create_date, 'YYYY-MM') = TO_CHAR(SYSDATE,
		'YYYY-MM')
	</select>

	<select id="TodayVisitor" resultType="map">
		SELECT
		TO_CHAR(last_access, 'YYYY-MM-DD') AS day,
		COUNT(*) AS
		visitor_count
		FROM MEMBER
		WHERE last_access BETWEEN
		TRUNC(SYSDATE, 'MM') AND LAST_DAY(SYSDATE)
		GROUP BY
		TO_CHAR(last_access, 'YYYY-MM-DD')
		ORDER BY day;
	</select>
	
	<update id="memberUpdatePassword" parameterType="memberVO">
		UPDATE MEMBER
		SET member_pw = #{member_pw}
		WHERE member_id = #{member_id}
	</update>

</mapper>